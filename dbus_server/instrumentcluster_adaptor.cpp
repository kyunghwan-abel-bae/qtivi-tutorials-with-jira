/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i instrumentcluster_adaptor.h -a :instrumentcluster_adaptor.cpp instrumentcluster.xml
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "instrumentcluster_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class InstrumentClusterAdaptor
 */

InstrumentClusterAdaptor::InstrumentClusterAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

InstrumentClusterAdaptor::~InstrumentClusterAdaptor()
{
    // destructor
}

Warning InstrumentClusterAdaptor::currentWarning() const
{
    // get the value of property currentWarning
    return qvariant_cast< Warning >(parent()->property("currentWarning"));
}

double InstrumentClusterAdaptor::fuel() const
{
    // get the value of property fuel
    return qvariant_cast< double >(parent()->property("fuel"));
}

int InstrumentClusterAdaptor::rpm() const
{
    // get the value of property rpm
    return qvariant_cast< int >(parent()->property("rpm"));
}

int InstrumentClusterAdaptor::speed() const
{
    // get the value of property speed
    return qvariant_cast< int >(parent()->property("speed"));
}

InstrumentClusterModule::SystemType InstrumentClusterAdaptor::systemType() const
{
    // get the value of property systemType
    return qvariant_cast< InstrumentClusterModule::SystemType >(parent()->property("systemType"));
}

double InstrumentClusterAdaptor::temperature() const
{
    // get the value of property temperature
    return qvariant_cast< double >(parent()->property("temperature"));
}

Warning InstrumentClusterAdaptor::currentWarning()
{
    // handle method call Example.IVI.InstrumentCluster.currentWarning
    Warning currentWarning;
    QMetaObject::invokeMethod(parent(), "currentWarning", Q_RETURN_ARG(Warning, currentWarning));
    return currentWarning;
}

double InstrumentClusterAdaptor::fuel()
{
    // handle method call Example.IVI.InstrumentCluster.fuel
    double fuel;
    QMetaObject::invokeMethod(parent(), "fuel", Q_RETURN_ARG(double, fuel));
    return fuel;
}

int InstrumentClusterAdaptor::rpm()
{
    // handle method call Example.IVI.InstrumentCluster.rpm
    int rpm;
    QMetaObject::invokeMethod(parent(), "rpm", Q_RETURN_ARG(int, rpm));
    return rpm;
}

int InstrumentClusterAdaptor::speed()
{
    // handle method call Example.IVI.InstrumentCluster.speed
    int speed;
    QMetaObject::invokeMethod(parent(), "speed", Q_RETURN_ARG(int, speed));
    return speed;
}

InstrumentClusterModule::SystemType InstrumentClusterAdaptor::systemType()
{
    // handle method call Example.IVI.InstrumentCluster.systemType
    InstrumentClusterModule::SystemType systemType;
    QMetaObject::invokeMethod(parent(), "systemType", Q_RETURN_ARG(InstrumentClusterModule::SystemType, systemType));
    return systemType;
}

double InstrumentClusterAdaptor::temperature()
{
    // handle method call Example.IVI.InstrumentCluster.temperature
    double temperature;
    QMetaObject::invokeMethod(parent(), "temperature", Q_RETURN_ARG(double, temperature));
    return temperature;
}

