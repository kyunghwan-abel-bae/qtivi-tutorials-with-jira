/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i dbus_conversion.h -a instrumentcluster_adaptor.h: instrumentcluster.xml
 *
 * qdbusxml2cpp is Copyright (C) 2019 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef INSTRUMENTCLUSTER_ADAPTOR_H
#define INSTRUMENTCLUSTER_ADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "dbus_conversion.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface Example.IVI.InstrumentCluster
 */
class InstrumentClusterAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "Example.IVI.InstrumentCluster")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"Example.IVI.InstrumentCluster\">\n"
"    <property access=\"read\" type=\"i\" name=\"speed\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"rpm\"/>\n"
"    <property access=\"read\" type=\"d\" name=\"fuel\"/>\n"
"    <property access=\"read\" type=\"d\" name=\"temperature\"/>\n"
"    <property access=\"read\" type=\"(i)\" name=\"systemType\">\n"
"      <annotation value=\"InstrumentClusterModule::SystemType\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"(sss)\" name=\"currentWarning\">\n"
"      <annotation value=\"Warning\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <method name=\"speed\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"speed\"/>\n"
"    </method>\n"
"    <method name=\"rpm\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"rpm\"/>\n"
"    </method>\n"
"    <method name=\"fuel\">\n"
"      <arg direction=\"out\" type=\"d\" name=\"fuel\"/>\n"
"    </method>\n"
"    <method name=\"temperature\">\n"
"      <arg direction=\"out\" type=\"d\" name=\"temperature\"/>\n"
"    </method>\n"
"    <method name=\"systemType\">\n"
"      <annotation value=\"InstrumentClusterModule::SystemType\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"(i)\" name=\"systemType\"/>\n"
"    </method>\n"
"    <method name=\"currentWarning\">\n"
"      <annotation value=\"Warning\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"(sss)\" name=\"currentWarning\"/>\n"
"    </method>\n"
"    <signal name=\"speedChanged\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"speed\"/>\n"
"    </signal>\n"
"    <signal name=\"rpmChanged\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"rpm\"/>\n"
"    </signal>\n"
"    <signal name=\"fuelChanged\">\n"
"      <arg direction=\"out\" type=\"d\" name=\"fuel\"/>\n"
"    </signal>\n"
"    <signal name=\"temperatureChanged\">\n"
"      <arg direction=\"out\" type=\"d\" name=\"temperature\"/>\n"
"    </signal>\n"
"    <signal name=\"systemTypeChanged\">\n"
"      <annotation value=\"InstrumentClusterModule::SystemType\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"(i)\" name=\"systemType\"/>\n"
"    </signal>\n"
"    <signal name=\"currentWarningChanged\">\n"
"      <annotation value=\"Warning\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"(sss)\" name=\"currentWarning\"/>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    InstrumentClusterAdaptor(QObject *parent);
    virtual ~InstrumentClusterAdaptor();

public: // PROPERTIES
    Q_PROPERTY(Warning currentWarning READ currentWarning)
    Warning currentWarning() const;

    Q_PROPERTY(double fuel READ fuel)
    double fuel() const;

    Q_PROPERTY(int rpm READ rpm)
    int rpm() const;

    Q_PROPERTY(int speed READ speed)
    int speed() const;

    Q_PROPERTY(InstrumentClusterModule::SystemType systemType READ systemType)
    InstrumentClusterModule::SystemType systemType() const;

    Q_PROPERTY(double temperature READ temperature)
    double temperature() const;

public Q_SLOTS: // METHODS
    Warning currentWarning();
    double fuel();
    int rpm();
    int speed();
    InstrumentClusterModule::SystemType systemType();
    double temperature();
Q_SIGNALS: // SIGNALS
    void currentWarningChanged(Warning currentWarning);
    void fuelChanged(double fuel);
    void rpmChanged(int rpm);
    void speedChanged(int speed);
    void systemTypeChanged(InstrumentClusterModule::SystemType systemType);
    void temperatureChanged(double temperature);
};

#endif
